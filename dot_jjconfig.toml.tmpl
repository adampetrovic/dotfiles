[user]
name = "{{ .full_name }}"
email = "{{ .email }}"

[signing]
behaviour = "own"
backend = "ssh"
{{- if .work }}
key = "{{ (onepasswordRead "op://Private/SSH Key - Atlassian/public_key") }}"
{{- else }}
key = "{{ (onepasswordRead "op://Private/SSH Key - Personal/public_key") }}"
{{- end }}
backends.ssh.program = "/Applications/1Password.app/Contents/MacOS/op-ssh-sign"
backends.ssh.allowed-signers = "~/.config/git/allowed_ssh_signers"

[ui]
editor = "vim"
default-command = "log"
diff-formatter = ["delta", "--dark", "$left", "$right"]

[fix.tools.detekt]
command = ["./gradlew", "detekt"]
patterns = ["glob:'**/*.kt'"]

[git]
auto-local-bookmark = false
push-new-bookmarks = true

[revsets]
log = "trunk() | (mutable() & mine() & visible_heads()) ~ remote_bookmarks() | ancestors(immutable_heads()..heads(bookmarks()), 2)"

[revset-aliases]
"mine()" = "user()"
"user()" = "user('{{ .email }}')"
"user(x)" = "author(x)"
"immutable_heads()" = "trunk() | tags()"
"stack()" = "ancestors(mutable() & (..@ | @::), 2)"
"streams()" = "heads(::@ & bookmarks())"
"change()" = "::@ ~ ::trunk()"
"branch_point()" = "roots(::@ ~ ::trunk())-"
"remote_head()" = "remote_bookmarks() & ancestors(@) & heads(remote_bookmarks())"
"local_changes()" = "@ ~ remote_head()"
"merged_remotes()" = "remote_bookmarks() & ::main@origin & heads(remote_bookmarks() & mine())"

[aliases]
sync = [
  "util",
  "exec",
  "--",
  "bash",
  "-c",
  '''
  #!/usr/bin/env bash
  gum spin --title "Syncing remotes..." -- jj git fetch --all-remotes
  ''',
  ""
]
restack = [
  "util",
  "exec",
  "--",
  "bash",
  "-c",
  '''
  #!/usr/bin/env bash
  set -eu -o pipefail
  
  # Sync remotes first
  jj sync
  
  # Restack on trunk
  jj rebase --skip-emptied -d 'trunk()'
  ''',
  ""
]
start = [
  "util",
  "exec",
  "--",
  "bash",
  "-c",
  '''
  #!/usr/bin/env bash
  set -eu -o pipefail
  
  # Sync remotes first
  jj sync

  # new commit off trunk
  jj new -r 'trunk()' -m "${1:-}"
  ''',
  "",
]
merge-main = ['new', '-r', 'trunk()', '@', '-m', 'merge main']
tug = ["bookmark", "move", "--from", "heads(::@- & bookmarks())", "--to", "@-"]
forget = ['bookmark', 'forget']
a = ['abandon']

# Move a single bookmark from the path to trunk() to the current changeset
yoink = [
  "util",
  "exec",
  "--",
  "bash",
  "-c",
  '''
  #!/usr/bin/env bash
  set -eu -o pipefail
  
  # Find all bookmarks in the path from trunk to current commit
  bookmarks=$(jj log --no-graph -r "(::@ ~ ::trunk()) & bookmarks()" -T 'local_bookmarks.map(|b| b.name()).join("\n")' | grep -v '^$' || true)
  
  # Count the number of bookmarks
  bookmark_count=$(echo "$bookmarks" | grep -c . || echo "0")
  
  if [[ "$bookmark_count" -eq 0 ]]; then
    echo "Error: No bookmarks found in the path from trunk() to @"
    exit 1
  elif [[ "$bookmark_count" -gt 1 ]]; then
    echo "Error: Multiple bookmarks found in the path from trunk() to @:"
    echo "$bookmarks"
    echo "Please specify which bookmark to move manually"
    exit 1
  fi
  
  # We have exactly one bookmark, move it to @
  bookmark_name=$(echo "$bookmarks" | head -1)
  echo "Moving bookmark '$bookmark_name' to current changeset"
  jj bookmark set "$bookmark_name" -r @
  ''',
  ""
]

# track a remote branch by fetching first
track = [
  "util",
  "exec",
  "--",
  "bash",
  "-c",
  '''
  #!/usr/bin/env bash
  set -eu -o pipefail

  # Sync remotes first
  jj sync

  # Track the remote bookmark
  jj bookmark track "$1@origin"

  # Create new changeset on top of the tracked bookmark
  jj new -r "$1"
  ''',
  "",
]

# perform a diff of local changes against the remote bookmark pointing to the same change
# useful to see what a jj git push will change against the remote
remote-diff = [
  "util",
  "exec", 
  "--",
  "bash",
  "-c",
  '''
  #!/usr/bin/env bash
  set -eu -o pipefail

  # Sync remotes first
  jj sync
  
  # Get the current bookmark name using jj from same working directory
  bookmark=$(jj log --no-graph -r @ -T 'local_bookmarks.map(|b| b.name()).join(" ")' | tr -d ' ')
  
  if [[ -z "$bookmark" ]]; then
    echo "No local bookmark found at current commit"
    exit 1
  fi
  
  # Diff against the remote version
  jj diff --from "${bookmark}@origin" --to @
  ''',
  "",
]

# Reset the current set of changes to whatever is on the remote

# Often when you accidentally make some local changes into a changeset you've already
# pushed up, removing those changes leads to a new changeset that differs from the remote
# so pushing it up will cause a rewrite of history (i.e. when its in review).
#
# assuming you are on a changeset that is the HEAD of the remote bookmark, running this command
# will change your local changeset history to match the remote bookmark's and will then rebase
# any subsequent changes on top that haven't been pushed yet.
reset-to-remote = [
  "util",
  "exec",
  "--",
  "bash",
  "-c",
  '''
  #!/usr/bin/env bash
  set -eu -o pipefail

  # Sync remotes first
  jj sync
  
  # Get the current bookmark name
  bookmark=$(jj log --no-graph -r @ -T 'local_bookmarks.map(|b| b.name()).join(" ")' | tr -d ' ')
  
  if [[ -z "$bookmark" ]]; then
    echo "No local bookmark found at current commit"
    exit 1
  fi
  
  echo "Warning: This will discard all local changes and reset to ${bookmark}@origin"
  echo "Child commits will be rebased on top of the remote commit"
  echo "Press Enter to continue or Ctrl+C to cancel..."
  read
  
  # Get the children of the current commit before we modify anything
  children=$(jj log --no-graph -r "@+" -T 'commit_id' 2>/dev/null || echo "")
  
  # Rebase children onto the remote bookmark
  if [[ -n "$children" ]]; then
    jj rebase -s "@+" -d "${bookmark}@origin"
  fi
  
  # Abandon the current commit
  jj abandon @
  
  # Move the bookmark to point to the remote commit
  jj bookmark set "${bookmark}" -r "${bookmark}@origin"
  
  # Move to the remote commit
  jj edit "${bookmark}@origin"
  ''',
  "",
]

# Split all local changes into a separate changeset on top of the remote
# This takes all local changes that haven't been pushed and creates a new changeset
# containing those changes, then resets the current changeset to match the remote
split-changes = [
  "util",
  "exec",
  "--",
  "bash",
  "-c",
  '''
  #!/usr/bin/env bash
  set -eu -o pipefail

  # Sync remotes first
  jj sync
  
  # Get the current bookmark name
  bookmark=$(jj log --no-graph -r @ -T 'local_bookmarks.map(|b| b.name()).join(" ")' | tr -d ' ')
  
  if [[ -z "$bookmark" ]]; then
    echo "No local bookmark found at current commit"
    exit 1
  fi
  
  # Check if there are any local changes to split
  if ! jj diff --from "${bookmark}@origin" --to @ --stat | grep -q "0 files changed"; then
    echo "Splitting local changes from ${bookmark} into a new changeset..."
    
    # Rebase the bookmark to point to the remote
    jj rebase -d "${bookmark}@origin" -b "${bookmark}"
    
    # Duplicate the current commit to preserve local changes
    jj duplicate -r @
    duplicate_id=$(jj log --color never --no-graph -r 'latest(all() ~ @)' -T 'change_id.short()')
    
    # Abandon the original commit with local changes
    jj abandon -r "${bookmark}"
    
    # Move the bookmark to point to the duplicate
    jj bookmark set "${bookmark}" -r "${duplicate_id}" --allow-backwards
    
    # Edit the bookmark commit
    jj edit "${bookmark}"

    # Set empty description
    jj describe -m ""
    
    echo "Local changes have been split into a new changeset"
    echo "Current changeset now exactly matches ${bookmark}@origin"
  else
    echo "No local changes found to split"
  fi
  ''',
  "",
]

[template-aliases]
"link(target, text)" = 'raw_escape_sequence("\x1b]8;;" ++ target ++ "\x1b\\") ++ label("text link", text) ++ raw_escape_sequence("\x1b]8;;\x1b\\")'

"commit_description_verbose(commit)" = '''
concat(
  commit_description(commit),
  "JJ: ignore-rest\n",
  diff.git(),
)
'''

"commit_description(commit)" = '''
concat(
  commit.description(), "\n",
  "JJ: This commit contains the following changes:\n",
  indent("JJ:    ", diff.stat(72)),
)
'''

[templates]
draft_commit_description = "commit_description(self)"
git_push_bookmark = '"apetrovic/push-" ++ change_id.short()'
