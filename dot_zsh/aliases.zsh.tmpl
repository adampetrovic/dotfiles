alias l='ls'
alias g='git'
{{- if (eq .chezmoi.os "darwin") }}
alias ls="gls --color"
alias dns="sudo killall -hUP mDNSResponder"
alias ip="dig +short myip.opendns.com @resolver1.opendns.com"
alias kl='kubectl autons logs'
alias kgp='k get pods -A | grep'
{{- end }}

{{ if .personal -}}
function stash-yt() {
    if [ "$#" -eq 2 ]
    then
        pod=$(kubectl get pods -n media -l app.kubernetes.io/name=stash -o jsonpath="{.items[0].metadata.name}")
        if [ -f /tmp/cookies.txt ]
        then
            echo "downloading with cookies"
            kubectl cp /tmp/cookies.txt media/$pod:/tmp/cookies.txt
            kubectl exec pod/$pod -n media -ti -- /usr/bin/yt-dlp --cookies /tmp/cookies.txt -f 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/mp4' -o "/media/$1/%(title)s.%(ext)s" $2
        else
            kubectl exec pod/$pod -n media -ti -- /usr/bin/yt-dlp -f 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/mp4' -o "/media/$1/%(title)s.%(ext)s" $2
        fi
        curl --silent -H "ApiKey: {{ (onepasswordItemFields "s6vvx3amthzsur5sebo2re7xje").apikey.value }}" -H "Content-Type: application/json" --data '{  "query": "mutation { metadataScan ( input: { scanGenerateCovers: true, scanGenerateThumbnails: true } ) } "}' https://{{ (onepasswordItemFields "s6vvx3amthzsur5sebo2re7xje").url.value -}}/graphql > /dev/null && echo 'stash synced successfully'
    else
        echo "Usage: $0 <tag> <url>"
        exit 1
    fi
}

function stash-sync() {
    echo 'syncing files to stash...'
    pod=$(kubectl get pods -n media -l app.kubernetes.io/name=stash -o jsonpath="{.items[0].metadata.name}")
    kubectl cp ~/Desktop/.hidden/. media/$pod:/media
    find ~/Desktop/.hidden/. -type f \( ! -iname "*.crdownload" ! -iname "*.part" \) -exec rm '{}' \;
    curl --silent -H "ApiKey: {{ (onepasswordItemFields "s6vvx3amthzsur5sebo2re7xje").apikey.value }}" -H "Content-Type: application/json" --data '{  "query": "mutation { metadataScan ( input: { scanGenerateCovers: true, scanGenerateThumbnails: true } ) } "}' https://{{ (onepasswordItemFields "s6vvx3amthzsur5sebo2re7xje").url.value -}}/graphql > /dev/null && echo 'stash synced successfully'
}

function stash-watch() {
    curl --connect-timeout 1 {{ (onepasswordItemFields "s6vvx3amthzsur5sebo2re7xje").url.value -}} &> /dev/null
    if [ ! $? -eq 0 ]
    then
        echo "Can't connect to stash. Check network and try again."
    fi
    mkdir -p ~/Desktop/.hidden/{g,f,c}
    echo 'stash-watch: waiting for new files. Ctrl+C to exit'
    stash-sync
    while [ -d ~/Desktop/.hidden/ ] ; do
        find ~/Desktop/.hidden/. -type d | entr -d echo ''
        stash-sync
    done
}
{{ end -}}

{{ if .work -}}
# ssh into a dev instance. requires atlas + the atlas micros plugin to be installed
function micros-ssh() { 
    atlas micros service ssh --service=$1 --env=$2 
}

function stacks() {
    if [ "$#" -eq 2 ]
    then
        PARAM='.environments | "'$2'" as $k'
    elif [ "$#" -eq 1 ]
    then
        PARAM='.environments | keys[] as $k'
    else
        echo "Usage: $0 <name> <end>"
        exit 1
    fi

    read -r -d '' JQ_EXPR << END
        [
            $PARAM |
            {
                env: \$k,
                url: .[\$k].url,
                stacks: {
                    stable: {
                        traffic: .[\$k].stable.traffic,
                        id: .[\$k].stable.id
                    },
                    canary: {
                        traffic: .[\$k].canary.traffic,
                        id: .[\$k].canary.id
                    },
                    previous: {
                        traffic: .[\$k].previous.traffic,
                        id: .[\$k].previous.id
                    }
                }
            }
        ]
END

    JSON_RESP=$(atlas micros service show --service $1 --output json | jq -r "$JQ_EXPR")
    echo $JSON_RESP | jq

}

function instance-type() {
    if [ "$#" -eq 2 ]
    then
        PARAM='.stacks | "'$2'" as $k'
    elif [ "$#" -eq 1 ]
    then
        PARAM='.stacks | keys[] as $k'
    else
        echo "Usage: $0 <name> <end>"
        exit 1
    fi

    read -r -d '' JQ_EXPR << END
        [
            $PARAM |
            {
                env: \$k, 
                instanceType: .[\$k][].outputs.WebServerInstance
            }
        ]
END

    JSON_RESP=$(atlas micros service show --service $1 --output json | jq -r "$JQ_EXPR")
    echo $JSON_RESP | jq

}

function sidecar-versions() {
    if [ "$#" -eq 2 ]
    then
        PARAM='.stacks."'$2'"[]'
    elif [ "$#" -eq 1 ]
    then
        PARAM='.stacks[][]'
    else
        echo "Usage: $0 <name> <end>"
        exit 1
    fi

    JSON_RESP=$(micros service:show --json $1 | jq -r "$PARAM | {env: .env, sidecars: .platformComponents}")
    echo $JSON_RESP | jq
}

function service-dns() {
    atlas slauth curl -a service-central -- "https://services.prod.atl-paas.net/api/v2/services/$1/attributes/dns-name" 2>/dev/null | jq -r '.value[].value'
}

function metric-dimensions() {
    METRIC_URL='https://api.us1.signalfx.com/v2/metrictimeseries'
    TIMEOUT=60
    METRIC_NAME=$1
    
    read -r -d '' RESP_FORMAT << END
        {
            created: (.created / 1000 | strflocaltime("%Y-%m-%d %H:%M:%S (%Z)")),
            dimensions: .dimensions
        }
END
    JSON_RESP=$(http --timeout=${TIMEOUT} GET ${METRIC_URL}/\?query\=sf_metric:${METRIC_NAME} x-sf-token:${SFX_TOKEN} | jq -r ".results[0] | ${RESP_FORMAT}")
    echo $JSON_RESP | jq
}
{{ end -}}
