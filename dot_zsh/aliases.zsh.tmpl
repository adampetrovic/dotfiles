alias l='ls'
alias g='git'
{{- if (eq .chezmoi.os "darwin") }}
alias ls="gls --color"
alias dns="sudo killall -hUP mDNSResponder"
alias ip="dig +short myip.opendns.com @resolver1.opendns.com"
alias kl='kubectl autons logs'
alias kgp='k get pods -A | grep'
{{- end }}

{{ if .personal -}}
function stash-yt() {
    if [ "$#" -eq 2 ]
    then
        pod=$(kubectl get pods -n media -l app.kubernetes.io/name=stash -o jsonpath="{.items[0].metadata.name}")
        if [ -f /tmp/cookies.txt ]
        then
            echo "downloading with cookies"
            kubectl cp /tmp/cookies.txt media/$pod:/tmp/cookies.txt
            kubectl exec pod/$pod -n media -ti -- /usr/bin/yt-dlp --cookies /tmp/cookies.txt -f 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/mp4' -o "/media/$1/%(title)s.%(ext)s" $2
        else
            kubectl exec pod/$pod -n media -ti -- /usr/bin/yt-dlp -f 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/mp4' -o "/media/$1/%(title)s.%(ext)s" $2
        fi
        curl --silent -H "ApiKey: {{ (onepasswordItemFields "s6vvx3amthzsur5sebo2re7xje").apikey.value }}" -H "Content-Type: application/json" --data '{  "query": "mutation { metadataScan ( input: { scanGenerateCovers: true, scanGenerateThumbnails: true } ) } "}' https://{{ (onepasswordItemFields "s6vvx3amthzsur5sebo2re7xje").url.value -}}/graphql > /dev/null && echo 'stash synced successfully'
    else
        echo "Usage: $0 <tag> <url>"
        exit 1
    fi
}

function stash-sync() {
    echo 'starting sync operation...'
    pod=$(kubectl get pods -n media -l app.kubernetes.io/name=stash -o jsonpath="{.items[0].metadata.name}")
    if [ -z "$pod" ]; then
        echo "Error: stash pod not found"
        return 1
    fi

    temp_file=$(mktemp)
    files=($(find ~/Desktop/.config/. -type f \( ! -iname "*.crdownload" ! -iname "*.part" \)))

    if [ ${#files[@]} -eq 0 ]; then
        echo "No files found to sync"
        rm "$temp_file"
        return 0
    fi

    echo "Found ${#files[@]} files to sync"

    all_success=true
    for file in "${files[@]}"; do
        relative_path=${file#~/Desktop/.config/.}
        if kubectl cp "$file" "media/$pod:/media/$relative_path"; then
            # verify the file exists
            if kubectl exec -n media "$pod" -- test -f "/media/$relative_path"; then
                echo "✅ Successfully copied: $relative_path" | tee -a "$temp_file"
            else
                echo "❌ Failed to verify copy: $relative_path"
                all_success=false
                break
            fi
        else
            echo "❌ Copy command failed: $relative_path"
            all_success=false
            break
        fi
    done
    
    if [ "$all_success" = true ]; then
        echo "All files copied successfully. Cleaning up files"

        # delete only successfully copied files
        while IFS= read -r line; do
            file_path=$(echo "$line" | sed 's/^✅ Successfully copied: //')
            full_path="$HOME/Desktop/.config/./$file_path"
            if [ -f "$full_path" ]; then
                rm "$full_path"
            fi
        done < "$temp_file"
    fi

    echo "Triggering metadata scan..."
    if curl --silent \
        -H "ApiKey: {{ (onepasswordItemFields "s6vvx3amthzsur5sebo2re7xje").apikey.value }}" \
        -H "Content-Type: application/json" \
        --data '{
            "query": "mutation {
                metadataScan (
                    input: {
                        scanGenerateCovers: true,
                        scanGenerateThumbnails: true
                    }
                )
            }"
        }' \
        "https://{{ (onepasswordItemFields "s6vvx3amthzsur5sebo2re7xje").url.value -}}/graphql" > /dev/null; then
            echo "Stash synced successfully"
        else
            echo "Warning: metdata scan failed"
        fi

    rm "$temp_file"
}

function stash-watch() {
    curl --connect-timeout 1 {{ (onepasswordItemFields "s6vvx3amthzsur5sebo2re7xje").url.value -}} &> /dev/null
    if [ ! $? -eq 0 ]
    then
        echo "Can't connect to stash. Check network and try again."
    fi
    mkdir -p ~/Desktop/.config/{a,c,f,g}
    echo 'stash-watch: waiting for new files. Ctrl+C to exit'
    stash-sync
    while [ -d ~/Desktop/.config/ ] ; do
        find ~/Desktop/.config/. -type d | entr -d echo ''
        stash-sync
    done
}
{{ end -}}
